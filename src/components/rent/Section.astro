---
interface Props {
  title: string;
  subtitle: string;
  actionLink?: string;
  actionLabel?: string;
  split?: boolean;
  imageOneSrc?: string;
  imageTwoSrc?: string;
  classes?: string;
}

const {
  title,
  subtitle,
  actionLink,
  actionLabel,
  split,
  imageOneSrc,
  imageTwoSrc,
  classes,
  ...rest
} = Astro.props;
---

<section
  class:list={["app-section", { "+split": split }, { classes }]}
  {...rest}
  x-data="{show: false}"
  x-intersect:enter="show = true"
  :class="{'+intersect': show === true}"
>
  <div class="container">
    <div class="app-section__inner">
      {
        !!split && (
          <div class="app-section__images _images">
            {imageOneSrc && (
              <div class="_imageOne">
                <img src={imageOneSrc} alt="" />
              </div>
            )}
            {imageTwoSrc && (
              <div class="_imageTwo">
                <img src={imageTwoSrc} alt="" />
              </div>
            )}
          </div>
        )
      }
      <div class="_splitwrap">
        <header class="app-section__header">
          <h2 class="_title">{title}</h2>
          <h4 class="_subtitle">{subtitle}</h4>
          {
            !split && (
              <div class="_action">
                <a href={actionLink}>{actionLabel}</a>
              </div>
            )
          }
        </header>
        <div class="app-section__content">
          <slot />
        </div>
      </div>
    </div>
  </div>
</section>

<style lang="scss">
  .app-section {
    padding-block: clamp(4.6rem, 6.75%, 13rem);

    &:nth-child(even of .app-section) {
      background: var(--color-surface-1);
    }

    &:not(.\+split) {
      ._splitwrap {
        display: contents;
      }
    }

    &__inner {
      display: grid;
      grid-template-columns: 100%;
      gap: 4.8rem;

      .\+split & {
        grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
        align-items: center;
      }
    }

    &__images {
      display: grid;
      grid-template-columns: minmax(0, 2fr) minmax(0, 3fr);
      gap: 1.6rem;
      min-height: 350px;
      padding-right: 3.2rem;

      &:has(> :only-child) {
        grid-template-columns: minmax(0, 400px);
        justify-content: center;
      }

      > * {
        border-radius: 2.4rem;
        overflow: clip;

        img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
      }

      ._imageOne {
        translate: 0 -2rem;
      }

      ._imageTwo {
        translate: 0 2rem;
      }

      :where(._imageOne, ._imageTwo):only-child {
        translate: unset;
        justify-self: center;
      }
    }

    &__header {
      display: grid;
      grid-template-columns: minmax(0, 1fr) auto;
      grid-template-areas: "subtitle action" "title action";
      gap: 1.6rem;

      ._title {
        grid-area: title;
        font-size: 3.6rem;
        line-height: 1.15;
        text-wrap: balance;
      }

      ._subtitle {
        grid-area: subtitle;
        display: flex;
        align-items: center;
        gap: 1.6rem;
        color: var(--color-accent);
        font-size: 1.8rem;
        font-weight: 500;
        text-transform: uppercase;
        text-wrap: balance;

        &::before {
          content: "";
          width: 3.5rem;
          height: 2px;
          background: currentColor;
        }
      }

      ._action {
        grid-area: action;
        align-self: end;
        color: var(--color-text-secondary);

        a {
          color: inherit;
          text-decoration: none;
          font-weight: 500;
        }
      }
    }

    &__content {
      display: flex;
      flex-flow: column;
      align-items: flex-start;
      gap: 2.4rem;
      margin-top: 2.4rem;
    }
  }
</style>
